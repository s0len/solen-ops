schedule:
  # No in-script schedules since we run these manually with a cronjob
  border_replacerr:
  health_checkarr:
  labelarr:
  nohl:
  sync_gdrive:
  poster_cleanarr:
  poster_renamerr:
  queinatorr:
  renameinatorr:
  unmatched_assets:
  upgradinatorr:
  nohl_bash:
  jduparr:

instances:
  radarr:
    radarr_standard:
      url: http://radarr-standard.media.svc.cluster.local
      api: "{{ .RADARR_API_KEY }}"
    radarr_kids:
      url: http://radarr-kids.media.svc.cluster.local
      api: "{{ .RADARR_API_KEY }}"
    radarr_anime:
      url: http://radarr-anime.media.svc.cluster.local
      api: "{{ .RADARR_API_KEY }}"
  sonarr:
    sonarr:
      url: http://sonarr.media.svc.cluster.local
      api: "{{ .SONARR_API_KEY }}"
  plex:
    plex:
      url: http://plex.media.svc.cluster.local:32400
      api: "{{ .PLEX_TOKEN }}"
  qbittorrent:
    qbittorrent:
      url: http://qbittorrent.media.svc.cluster.local
      username: "{{ .QBIT_USER }}"
      password: "{{ .QBIT_PASS }}"

discord:
  # Discord notifications:
  # You can use either Notifiarr or Discord's webhook
  # Notifiarr:
  # Use Notifiarr Passthrough
  # Use channel ID so notifiarr knows what channel to send the message to
  # Discord Webhook:
  # Use Discord's webhook
  # Channel ID not used
  notifiarr_webhook:
  # Main is used for version notifications
  main:
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  renameinatorr:
    # Will notify items that have been renamed
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  upgradinatorr:
    # Will notify if an upgrade has been found
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  poster_renamerr:
    # Note: It is recommended for a fresh run to not use a notifications channel, as it will spam the channel with all the matched assets
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  nohl:
    # Will notify if non-hardlinked files are found/searched for
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  queinatorr:
    # Will notify if a torrent/queue item has been handled
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  labelarr:
    # Will notify if a label has been added/removed to a movie or series
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  nohl_bash:
    # Will notify if a non-hardlinked file has been found
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:
  jduparr:
    # Will notify if a duplicate file has been found and relinked
    discord_webhook: "{{ .DISCORD_DAPS_WEBHOOK_URL }}"
    channel_id:

sync_gdrive:
  # THIS SCRIPT SYNCS GDRIVE TO A LOCAL FOLDER. ANYTHING UNIQUE IN THE FOLDER WILL BE DELETED.
  # -> You can use client_id, client_secret, and token to authenticate, or you can use gdrive_sa_location to use a service account.
  # DRAZZILB GDRIVE ID: 1VeeQ_frBFpp6AZLimaJSSr0Qsrl6Tb7z
  # Below are others that have been shared around Discord. If you have your own and would like to share it please contact me.
  # This script is meant to be used in conjunction with Plex-Meta-Manager, however, it can be used on its own.
  # This is a script base of this one: https://discord.com/channels/492590071455940612/1124032073557086258/1126226814629576858
  log_level: info # debug, info, warning, error, critical
  # Client ID for rclone usually ends with .apps.googleusercontent.com
  client_id: "{{ .GDRIVE_CLIENT_ID }}"
  client_secret: "{{ .GDRIVE_CLIENT_SECRET }}"
  # The token for rclone, this is the output of rclone config dump that needs to run manually
  # Token looks like this: { "access_token": "value", "token_type": "Bearer", "refresh_token": "value", "expiry": "value" }
  # NOTE: Include the curly braces
  token:
    {
      "access_token": "{{ .GDRIVE_ACCESS_TOKEN }}",
      "token_type": "Bearer",
      "refresh_token": "{{ .GDRIVE_REFRESH_TOKEN }}",
      "expiry": "{{ .GDRIVE_EXPIRY }}",
    }
  # The location of your rclone service account file (JSON)
  # gdrive_sa_location: /config/rclone_sa.json
  gdrive_sync: # example of multiple gdrive_id's with multiple sync_locations as objects, we have deprecated gdrive_id and sync_location so please use this instead
    # id: The ID of the folder you want to sync from
    # location: Where you want to sync the posters to
    - id: 1VeeQ_frBFpp6AZLimaJSSr0Qsrl6Tb7z # Drazzib
      location: /posters/drazz
    - id: 1wrSru-46iIN1iqCl2Cjhj5ofdazPgbsz # dsaq
      location: /posters/dsaq
    - id: 1zWY-ORtJkOLcQChV--oHquxW3JCow1zm # solens collection of others work
      location: /posters/solens-collection
    - id: 1YEuS1pulJAfhKm4L8U9z5-EMtGl-d2s7 # solens own work
      location: /posters/solen
    - id: 1cqDinU27cnHf5sL5rSlfO7o_T6LSxG77 # Reitenth own work
      location: /posters/Reitenth
    - id: 1TYVIGKpSwhipLyVQQn_OJHTobM6KaokB # TheOtherGuy own work
      location: /posters/TheOtherGuy
    - id: 1Xg9Huh7THDbmjeanW0KyRbEm6mGn_jm8 # BZ
      location: /posters/bz
    - id: 1oBzEOXXrTHGq6sUY_4RMtzMTt4VHyeJp # chrisdc
      location: /posters/chrisdc
    - id: 1G77TLQvgs_R7HdMWkMcwHL6vd_96cMp7 # Quafley
      location: /posters/quafley
    - id: 1bBbK_3JeXCy3ElqTwkFHaNoNxYgqtLug # Stupifier
      location: /posters/stupifier
    - id: 1KnwxzwBUQzQyKF1e24q_wlFqcER9xYHM # Sahara
      location: /posters/sahara
    - id: 1alseEnUBjH6CjXh77b5L4R-ZDGdtOMFr # Lion City Gaming
      location: /posters/lioncitygaming
    - id: 1ZfvUgN0qz4lJYkC_iMRjhH-fZ0rDN_Yu # MajorGiant - Contains homemade
      location: /posters/majorgiant
    - id: 1LIVG1RbTEd7tTJMbzZr7Zak05XznLFia # Overbook874 - Contains homemade, mostly bollywood / indian
      location: /posters/overbook874
    - id: 1HjwMWfI6XpQVYH36VBzYiJA4UWfoqcQ9 # IamSpartacus - Can contain white text versions of black text MM2K posters
      location: /posters/IamSpartacus
    - id: 1wOhY88zc0wdQU-QQmhm4FzHL9QiCQnpu # zarox - Can contain white text versions of black text MM2K posters
      location: /posters/zarox
    - id: 1qBC7p9K4zur5dOCf3F6VTyUROVvHQoSb
      location: /posters/jpalenz77
    - id: 1ZhcV8Ybja4sJRrVze-twOmb8fEZfZ2Ci
      location: /posters/miniMyself
    - id: 1Kb1kFZzzKKlq5N_ob8AFxJvStvm9PdiL
      location: /posters/kalyanrajnish
    - id: 1KJlsnMz-z2RAfNxKZp7sYP_U0SD1V6lS
      location: /posters/tokenminal
    - id: 1hEY9qEdXVDzIbnQ4z9Vpo0SVXXuZBZR-
      location: /posters/mareau
    - id: 1XXZL-TpqWqfbKBWCifN2-MRdGDbSzHTj
      location: /posters/dweagle76
    - id: 1ejgRXwX6opexs8oAX8CnpSpKQt7Hrf00
      location: /posters/darkkazul
    - id: 1Wz0S18sKOeyBURkJ1uT3RtkEmSsK1-PG
      location: /posters/WenIsInMood

poster_renamerr:
  # This script will rename your posters to match Plex-Meta-Manager's naming scheme from TPDB's naming utilizing Radarr/Sonarr as a source.
  #
  # NOTE: If you're planning to run border_replacerr and/or sync_posters it will appear that this script has hung. It's simply waiting
  # for the other scripts to finish. You can monitor progress and/or actions on their respective logs.
  # Logging for poster_renamer and border_replacerr scripts happens mostly at the end of the run, so you may not see anything until the end.
  # sync_posters is a bit more verbose as it utilizes the rclone sync command.
  log_level: info
  dry_run: false
  sync_posters: true # <- This will run sync_gdrive before renaming
  action_type: copy # <- Options: copy, move
  asset_folders: true # <- This will copy the folder structure of the source_dir to the destination_dir, this MUST be the same as you use in Plex-Meta-Manager
  print_only_renames: false # <- This will print the renames to the log, but will not actually rename anything
  # This will integrate border_replacer with poster_renamerr, set this to true if you want to use them at the same time (no need to schedule border_replacer)
  # Note: This will create a tmp dir in your output directory for border_replacer to use and for poster_renamer to have accurate account of what has been added
  # Note: All of border_replacer's settings will be used, except for the input_dir and output_dir
  border_replacerr: true
  # Libraries are ONLY used for collections
  library_names:
    - Filmer
    - Barnfilmer
    - Animefilmer
    - Serier
    - Barnserier
    - Animeserier
    - Sports
  # The order from lowest to highest priority
  # The order is 100% personal preference
  source_dirs:
    - /posters/solens-collection
    - /posters/jpalenz77
    - /posters/Reitenth
    - /posters/darkkazul
    - /posters/WenIsInMood
    - /posters/dweagle76
    - /posters/TheOtherGuy
    - /posters/miniMyself
    - /posters/kalyanrajnish
    - /posters/tokenminal
    - /posters/mareau
    - /posters/overbook874
    - /posters/quafley
    - /posters/chrisdc
    - /posters/lioncitygaming
    - /posters/sahara
    - /posters/IamSpartacus
    - /posters/bz
    - /posters/dsaq
    - /posters/majorgiant
    - /posters/zarox
    - /posters/drazz
    - /posters/solen
    - /posters/prioritize
  destination_dir: /config/assets
  instances:
    - plex
    - radarr_standard
    - radarr_kids
    - radarr_anime
    - sonarr

border_replacerr:
  # This script replaces the border on the posters or removes the border
  # WARNING: If you have overlays that are carefully position and choose to remove the border around the poster, the overlay
  # will not be in the correct position. This is because the overlay is positioned based on the border width.
  # Colors: https://www.w3schools.com/colors/colors_picker.asp
  log_level: info
  dry_run: false
  source_dirs:
    - /config/process
  destination_dir: /config/assets
  # If you want to adjust the border width (not all MM2K posters are 25px borders some are 26-27)
  border_width: 25
  # skip - This will skip border replacement until the next schedule/holiday
  skip: false
  # Setting a border color of nothing will remove the border, else it will add the border color
  # Examples: Must include everything from double quotes to double quotes such as "#FF0000"
  # "#FF0000" - Red
  # "#00FF00" - Green
  # "#0000FF" - Blue
  # "#FFA500" - Orange
  # "#FFFF00" - Yellow
  # "#800080" - Purple
  # "#FFC0CB" - Pink
  # "#FFFFFF" - White
  # "#000000" - Black
  # "#808080" - Gray
  # To remove borders set the border_colors to nothing.
  # Example: border_colors:
  border_colors:
  schedule:
    # You can make any holiday you want for any occasion. For the schedule please use the range(month/date-month/date) option
    christmas:
      schedule: range(12/01-12/31)
      color:
        - "#FF0000"
        - "#00FF00"
    halloween:
      schedule: range(10/01-10/31)
      color: "#FFA500"
    thanksgiving:
      schedule: range(11/01-11/30)
      color: "#FFA500"
    valentine:
      schedule: range(02/05-02/15)
      color:
        - "#D41F3A"
    easter:
      schedule: range(03/23-03/31)
      color:
        - "#fff7ad"

unmatched_assets:
  # There is a limitation to how this script works with regards to it matching series assets the
  # main series poster requires seasonal posters to be present. If you have a series that does
  # not have a seasonal poster then it will not match the series poster. If you don't have a season poster
  # your series will appear in the movies section.
  log_level: info
  instances:
    - plex
    - radarr_standard
    - radarr_kids
    - radarr_anime
    - sonarr
  # Supports both data path as well as base_name of folder path
  # Note: If you use base_name, the name must match exactly just without the "/"
  ignore_root_folders:
    - anime movies
    - /data/Kids Shows
  # Libraries are ONLY used for collections
  library_names:
    - Filmer
    - Barnfilmer
    - Animefilmer
    - Serier
    - Barnserier
    - Animeserier
  ignore_collections:
    - "Star Wars Universe"
    - "DC Animated Universe"
    - "Alien / Predator"
    - "Rocky / Creed"
    - "MonsterVerse"
    - "Star Trek"
    - "X-Men Universe"
    - "In Association With Marvel"
    - "View Askewniverse"
    - "The Mummy Universe"
    - "Middle Earth"
    - "In Association With DC"
    - "Wizarding World"
    - "Fast & Furious"
    - "The Spiderverse"
    - "Marvel Cinematic Universe"
    - "The Conjuring Universe"
    - "The Batman Universe"
    - "DC Extended Universe"
  source_dirs:
    - /config/assets

poster_cleanarr:
  # This script will remove any assets from your plex-meta-manager asset directory that are not being used by your media.
  # Note: This script will remove things that renamer has put in to the assets directory that do not have a folder in your
  # Media directory and cause a loop. I wouldn't recommend running this script very often (weekly at most, monthly is probably)
  log_level: info
  dry_run: true
  instances:
    - plex
    - radarr_1
    - sonarr
  # Libraries are ONLY used for collections
  library_names:
    - Movies
    - Anime Movies
  ignore_collections:
    - "Random Collection in assets you want to keep"
  # If using poster_renamer with border_replacer, include the tmp folder that border_replacer uses
  source_dirs:
    - /config/assets

upgradinatorr:
  # A script to upgrade Sonarr/Radarr libraries to the keep in line with trash-guides
  log_level: info
  dry_run: true
  instances:
    radarr_standard:
      count: 2
      tag_name: checked
      unattended: true
    radarr_kids:
      count: 1
      tag_name: checked
      unattended: true
    radarr_anime:
      count: 1
      tag_name: checked
      unattended: false
    sonarr:
      count: 1
      tag_name: checked
      unattended: true

renameinatorr:
  # This script will rename all series in Sonarr/Radarr to match the naming scheme of the
  # Naming Convention within Radarr/Sonarr. It will also add a tag to the series so that it can be easily
  # identified as having been renamed.
  # Warning: With a large library this script can take a while as it wait's for all API calls to finish before moving on to the next instance
  # Note If you see something along the lines of Unable to move series from '<Insert path/name>'. Try moving files manually: Source and destination can't be the same <insert_path/name>
  # This is normal and you'll even see this error if you perform the same action the script does manually.
  log_level: info
  dry_run: false
  rename_folders: true
  # Tag name and count are optional, if you don't want to use them leave them blank
  # The reason for count and tag is if you want to perform renaming actions in batches or in bulk
  count:
  tag_name: checked
  instances:
    - radarr_standard
    - radarr_kids
    - radarr_anime
    - sonarr

nohl:
  # This script will find all files that are not hardlinked and will process them in radarr
  # and sonarr. This is useful for finding files that are not hardlinked and wish to have 100%
  # hardlinks seeding.
  dry_run: true
  log_level: info
  maximum_searches: 10 # Please keep this number low to avoid bans
  print_files: false # Will not respect excludes for simply printing the files
  instances:
    - radarr_1
    - sonarr
  paths:
    - /data/media/filmer
    - /data/media/serier
    - /data/media/barnfilmer
    - /data/media/barnserier
    - /data/media/anime-filmer
    - /data/media/anime-serier
  filters:
    exclude_profiles: test3, test4
    # Do not include year in the exclude list
    # The title should be exactly as it appears in `Radarr` or `Sonarr`
    exclude_movies:
      - "The Matrix"
      - "The Matrix Reloaded"
      - "The Matrix Revolutions"
    exclude_series:
      - Diners, Drive-ins and Dives
      - Marvel's Spider-Man
      - M*A*S*H

queinatorr:
  # This script will move torrents from one category to another in qBittorrent based on
  # the title of the torrent. This is useful for moving torrents from a category that are stuck
  # in a queue due to a missing file or not being an upgrade for existing episode file(s).
  log_level: info
  dry_run: true
  days_to_keep: 14 # The number of days to keep in the pre_import_category prior to moving to the post_import_category
  instances:
    radarr_1:
      qbit_instance: qbittorrent_1
      pre_import_category: movies
      post_import_category: completed-movies
    sonarr_1:
      qbit_instance: qbittorrent_2
      pre_import_category: series
      post_import_category: completed-series
    sonarr_anime:
      qbit_instance: qbittorrent_2
      pre_import_category: anime
      post_import_category: completed-anime

labelarr:
  # A script to sync labels between Plex and Radarr/Sonarr
  # Warning: Due to the way that Plex API works, this script can take a while to run with a large library
  dry_run: true
  log_level: info
  instances:
    radarr_2:
      library_names:
        - Movies
      plex_instances:
        - plex
      # Labels/tags to sync between Radarr/Sonarr and Plex
      labels:
        - kids
    sonarr_3:
      library_names:
        - Animated Series
        - Childrens Series
      plex_instances:
        - plex
      labels:
        - kids

health_checkarr:
  # This script will delete movies and shows from Radarr and Sonarr based on the if they show
  # up in the health check. This is useful for removing movies and shows that have been removed
  # from TMDB or TVDB.
  log_level: info
  dry_run: false
  instances:
    - radarr_standard
    - radarr_kids
    - radarr_anime
    - sonarr

bash_scripts:
  # Bash Scripts
  # This is a collection of BASH scripts that can be run by the script.
  log_level: info
  nohl_bash:
    source:
    include:
      -
      -
    # Exclude certain movie/series folders from being searched
    # NOTE: It must be exactly as the folder is listed in your file system
    exclude:
      -
      -
  jduparr:
    data_dir:

main:
  log_level: info
